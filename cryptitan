#!/usr/bin/env bash
set -euo pipefail

CURRENT_SCRIPT="$(basename "$0")"
DOCKER_INPUT_FLAG="$(if [ -t 0 ]; then echo "-it"; fi)"

export PHP_VERSION=${PHP_VERSION:-"8"}
export COMPOSER_VERSION=${COMPOSER_VERSION:-"2"}
export NODE_VERSION=${NODE_VERSION:-"18"}
export CERTBOT_VERSION=${CERTBOT_VERSION:-"v2.6.0"}
export NGINX_VERSION=${NGINX_VERSION:-"1"}
export REDIS_VERSION=${REDIS_VERSION:-"6"}
export MYSQL_VERSION=${MYSQL_VERSION:-"8"}
export MONGO_VERSION=${MONGO_VERSION:-"6"}

export COMPOSE_FILE=docker-compose.yml

# Define environment variables...
export NGINX_SERVICE="nginx"
export MYSQL_SERVICE="mysql"
export MONGO_SERVICE="mongo"
export REDIS_SERVICE="redis"
export APP_SERVICE="application"
export WEBSOCKET_ENABLE="false"
export NGINX_SERVER="php-fpm"
export PROXY_NETWORK=${PROXY_NETWORK:-nginx-proxy}
export CERTBOT_ROOT_VOLUME=${CERTBOT_ROOT_VOLUME:-certbot-root}
export LETSENCRYPT_LIB_VOLUME=${LETSENCRYPT_LIB_VOLUME:-letsencrypt-lib}
export LETSENCRYPT_LOG_VOLUME=${LETSENCRYPT_LOG_VOLUME:-letsencrypt-log}
export LETSENCRYPT_VOLUME=${LETSENCRYPT_VOLUME:-letsencrypt}
export STOP_TIMEOUT=${STOP_TIMEOUT:-360}
export HOST_UID=${HOST_UID:-$(id -u)}
export HOST_GID=${HOST_GID:-$(id -g)}
export APP_USER=server

# Define reusable functions
function runtime_error() {
	echo -e "Error: $1" >&2 && exit 1
}

function check_service() {
	if [ -z "$(docker compose ps -q --status=running "$1" 2>/dev/null)" ]; then
		runtime_error "Service [$1] is not running."
	fi
}

function create_external_network() {
	if ! docker network inspect "$1" >/dev/null 2>&1; then
		docker network create "$1"
	fi
}

function create_external_volume() {
	if ! docker volume inspect "$1" >/dev/null 2>&1; then
		docker volume create "$1"
	fi
}

function filter_domain() {
	if [[ $1 =~ ^(https?):\/\/([A-Za-z0-9-]{1,63}\.)+([A-Za-z]{2,10})$ ]]; then
		(echo "$1" | awk -F[/:] '{print $4}' | sed -r 's/^www\.//')
	fi
}

function container_exec() {
	if [ ! -t 0 ]; then
		docker compose exec -T "$@"
	else
		docker compose exec "$@"
	fi
}

if [[ $EUID -eq 0 ]]; then
	runtime_error "You cannot start server as root."
fi

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
	runtime_error "Unsupported operating system [$(uname -s)]."
fi

# Ensure Docker is running...
if ! docker info >/dev/null 2>&1; then
	runtime_error "Docker is not running."
fi

# Create external networks if not exists
create_external_network "$PROXY_NETWORK"

# Create external volume if not exists
create_external_volume "$CERTBOT_ROOT_VOLUME"
create_external_volume "$LETSENCRYPT_LIB_VOLUME"
create_external_volume "$LETSENCRYPT_LOG_VOLUME"
create_external_volume "$LETSENCRYPT_VOLUME"

# Create home directories
mkdir -p "${HOME}/.composer"
mkdir -p "${HOME}/.npm"

COMPOSER_CMD="docker run --rm $DOCKER_INPUT_FLAG \
--volume ${COMPOSER_HOME:-$HOME/.composer}:/tmp \
--volume $(pwd):/app \
--user $(id -u):$(id -g) \
composer:${COMPOSER_VERSION}"

PHP_CMD="docker run --rm $DOCKER_INPUT_FLAG \
--user $(id -u):$(id -g) \
--volume $(pwd):/app \
--workdir /app \
php:${PHP_VERSION}-cli php"

NODE_CMD="docker run --rm $DOCKER_INPUT_FLAG \
--user $(id -u):$(id -g) \
--env npm_config_cache=/tmp/.npm \
--env GIT_CONFIG_COUNT=1 \
--env GIT_CONFIG_KEY_0=safe.directory \
--env GIT_CONFIG_VALUE_0=* \
--volume ${NPM_CONFIG_CACHE:-$HOME/.npm}:/tmp/.npm \
--volume $(pwd):/usr/src/app \
--workdir /usr/src/app \
node:${NODE_VERSION}"

SSL_NGINX_CMD="docker run --rm \
-v ${LETSENCRYPT_VOLUME}:/etc/letsencrypt \
-v ${LETSENCRYPT_LIB_VOLUME}:/var/lib/letsencrypt \
-v ${LETSENCRYPT_LOG_VOLUME}:/var/log/letsencrypt \
-v ${CERTBOT_ROOT_VOLUME}:/var/www/certbot \
nginx:${NGINX_VERSION}"

CERTBOT_CMD="docker run --rm $DOCKER_INPUT_FLAG \
-v ${LETSENCRYPT_VOLUME}:/etc/letsencrypt \
-v ${LETSENCRYPT_LIB_VOLUME}:/var/lib/letsencrypt \
-v ${LETSENCRYPT_LOG_VOLUME}:/var/log/letsencrypt \
-v ${CERTBOT_ROOT_VOLUME}:/var/www/certbot \
certbot/certbot:${CERTBOT_VERSION}"

# Create dhparams file if not exists
if ! eval "$SSL_NGINX_CMD" test -f "/etc/letsencrypt/ssl-dhparams.pem"; then
	eval "$SSL_NGINX_CMD" openssl dhparam -out "/etc/letsencrypt/ssl-dhparams.pem" 2048
fi

if [ $# -gt 0 ]; then
	if [ "$1" == "initialize" ]; then
		if [ ! -f .env ]; then
			# Run composer install
			if [ ! -d vendor ]; then
				eval "$COMPOSER_CMD" install
			fi

			cp .env.example .env

			eval "$PHP_CMD" artisan key:generate --force

			echo -e ".env initialized"
		else
			echo -e ".env file exists"
		fi
	else
		# Source Laravel environment files
		if [ ! -f .env ]; then
			runtime_error ".env file does not exist."
		fi

		source .env

		# Verify safe APP_ENV value
		if [ "$APP_ENV" == "production" ] && [ "$APP_DEBUG" == "true" ]; then
			runtime_error "You need to set APP_DEBUG=false in production"
		fi

		# Set compose file to use based on environment
		if [ "$APP_ENV" != "production" ]; then
			if [ -f docker-compose.dev.yml ]; then
				export COMPOSE_FILE=$COMPOSE_FILE:docker-compose.dev.yml
			fi
		else
			if [ -f docker-compose.prod.yml ]; then
				export COMPOSE_FILE=$COMPOSE_FILE:docker-compose.prod.yml
			fi
		fi

		# Extract domain from APP_URL
		APP_DOMAIN=$(filter_domain "$APP_URL")

		if [ -z "$APP_DOMAIN" ]; then
			runtime_error "The url [$APP_URL] is invalid."
		fi

		export APP_DOMAIN=${APP_DOMAIN}

		# Set nginx server variables
		if [ "$NGINX_SERVER" == "octane" ]; then
			export NGINX_DEFAULT_SERVER="/etc/nginx/includes/octane"
			export WORK_OCTANE=true
		else
			export NGINX_DEFAULT_SERVER="/etc/nginx/includes/php-fpm"
			export WORK_PHP_FPM=true
		fi

		if [ "$WEBSOCKET_ENABLE" == "true" ]; then
			export WORK_WEBSOCKET=true
		fi

		# Setup SSL Nginx Directives
		CERTIFICATE_DIR="/etc/letsencrypt/live/${APP_DOMAIN}"

		if (eval "$SSL_NGINX_CMD" test -f "${CERTIFICATE_DIR}/fullchain.pem") && (eval "$SSL_NGINX_CMD" test -f "${CERTIFICATE_DIR}/privkey.pem"); then
			export NGINX_DEFAULT_CONFIG="/etc/nginx/conf.d/default.ssl"
			export NGINX_WEBSOCKET_CONFIG="/etc/nginx/conf.d/websocket.ssl"

			export NGINX_HTTP_PORT="80"

			if [ "$WEBSOCKET_ENABLE" == "true" ]; then
				export NGINX_HTTPS_PORT="443,2096"
			else
				export NGINX_HTTPS_PORT="443"
			fi
		else
			export NGINX_DEFAULT_CONFIG="/etc/nginx/conf.d/default"
			export NGINX_WEBSOCKET_CONFIG="/etc/nginx/conf.d/websocket"

			if [ "$WEBSOCKET_ENABLE" == "true" ]; then
				export NGINX_HTTP_PORT="80,2095"
			else
				export NGINX_HTTP_PORT="80"
			fi
		fi

		# Update images and reinstall composer
		if [ "$1" == "update" ]; then
			docker compose pull

			docker pull "mlocati/php-extension-installer"
			docker pull "php:${PHP_VERSION}-fpm"
			docker pull "php:${PHP_VERSION}-cli"
			docker pull "composer:${COMPOSER_VERSION}"
			docker pull "node:${NODE_VERSION}"
			docker pull "nginx:${NGINX_VERSION}"
			docker pull "redis:${REDIS_VERSION}"
			docker pull "certbot/certbot:${CERTBOT_VERSION}"

			# Update package dependency locally
			if [ "$APP_ENV" != "production" ]; then
				eval "$NODE_CMD" npm install
				eval "$NODE_CMD" npx husky install
				eval "$COMPOSER_CMD" install
			fi

			docker compose build

		# Force recreate containers
		elif [ "$1" == "recreate" ]; then
			shift 1

			exec docker compose up -d \
				--timeout="$STOP_TIMEOUT" \
				--force-recreate "$@"

		# Set timeout to stop command
		elif [ "$1" == "stop" ]; then
			shift 1

			exec docker compose stop \
				--timeout="$STOP_TIMEOUT" "$@"

		# Run ssl to secure container...
		elif [ "$1" == "ssl" ]; then
			shift 1

			if [ -z "$CERTBOT_EMAIL" ]; then
				runtime_error "Set CERTBOT_EMAIL to proceed."
			fi

			check_service "$NGINX_SERVICE"

			eval "$CERTBOT_CMD" certonly \
				--webroot --webroot-path=/var/www/certbot \
				--email "$CERTBOT_EMAIL" \
				--agree-tos --no-eff-email --force-renewal \
				-d "$APP_DOMAIN"

			exec "./$CURRENT_SCRIPT" up -d \
				--timeout="$STOP_TIMEOUT" \
				--force-recreate "$NGINX_SERVICE"

		# Proxy PHP commands to the "php" binary on the application container...
		elif [ "$1" == "php" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				php "$@"

		# Proxy Composer commands to the "composer" binary on the application container...
		elif [ "$1" == "composer" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				composer "$@"

		# Proxy Artisan commands to the "artisan" binary on the application container...
		elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				php artisan "$@"

		# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
		elif [ "$1" == "debug" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				-e XDEBUG_SESSION=1 \
				"$APP_SERVICE" \
				php artisan "$@"

		# Proxy the "test" command to the "php artisan test" Artisan command...
		elif [ "$1" == "test" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				php artisan test "$@"

		# Initiate a Laravel Tinker session within the application container...
		elif [ "$1" == "tinker" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				php artisan tinker

		# Proxy Node commands to the "node" binary on the application container...
		elif [ "$1" == "node" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				node "$@"

		# Proxy NPM commands to the "npm" binary on the application container...
		elif [ "$1" == "npm" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				npm "$@"

		# Proxy NPX commands to the "npx" binary on the application container...
		elif [ "$1" == "npx" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				npx "$@"

		# Proxy Pint command to the "pint" binary
		elif [ "$1" == "pint" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				./vendor/bin/pint "$@"

		# Initiate a MySQL CLI terminal session within the "mysql" container...
		elif [ "$1" == "mysql" ]; then
			shift 1
			check_service "$MYSQL_SERVICE"

			container_exec \
				"$MYSQL_SERVICE" mysql \
				--user="$DB_USERNAME" \
				--password="$DB_PASSWORD" \
				"$DB_DATABASE" "$@"

		# Initiate a mongosh terminal session within the "mongo" container...
		elif [ "$1" == "mongosh" ]; then
			shift 1
			check_service "$MONGO_SERVICE"

			container_exec \
				"$MONGO_SERVICE" mongosh \
				-u "$DB_USERNAME" \
				-p "$DB_PASSWORD" \
				--authenticationDatabase admin \
				"$DB_DATABASE" "$@"

		# Initiate a mongodump terminal session within the "mongo" container...
		elif [ "$1" == "mongodump" ]; then
			shift 1
			check_service "$MONGO_SERVICE"

			container_exec \
				"$MONGO_SERVICE" mongodump "$@"

		# Initiate a Bash shell within the application container...
		elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				-u "$APP_USER" \
				"$APP_SERVICE" \
				bash "$@"

		# Initiate a root user Bash shell within the application container...
		elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
			shift 1
			check_service "$APP_SERVICE"

			container_exec \
				"$APP_SERVICE" \
				bash "$@"

		# Initiate a Redis CLI terminal session within the "redis" container...
		elif [ "$1" == "redis" ]; then
			shift 1
			check_service "$REDIS_SERVICE"

			container_exec \
				"$REDIS_SERVICE" redis-cli

		# Pass unknown commands to the "docker compose"...
		else
			exec docker compose "$@"
		fi
	fi
else
	exec docker compose ps
fi
